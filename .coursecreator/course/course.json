{
  "summary" : "This is the first in a series of courses for members of the Boulder High School robotics club. These courses will teach you everything you need to know to start writing code for the robot!",
  "title" : "Landsharks Java Training Course Part 1",
  "programming_language" : "JAVA",
  "language" : "en",
  "course_type" : "PyCharm",
  "items" : [
    {
      "title" : "Intro",
      "task_list" : [
        {
          "name" : "Welcome",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n    public static String solution() {\n        // Write your solution here\n\n        return \"Hello!\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solution());\n    }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>About This Course</h1>\n<p>Welcome to the Boulder High Robotics Java training course! This is the first in a series of courses that will teach you everything you need to know to get started on programming our robots. For our competition robots, we use the Java programming language, which is the language we'll use in this course.</p>\n<h2>About Me</h2>\n<p>My name is Noah Mollerstuen. I'm a senior at Boulder High and this year's software captain. Feel free to contact me with any questions; this is our first year using this course, so there will probably be mistakes and things that are unclear. The fastest way to contact me is to send a message in the #programming channel on the Discord server. You can also send me an email  at <b>noah@mollerstuen.com</b>, or just ask me at our next meeting.</p>\n<h2>Course Structure</h2>\n<p>This course is divided into a series of lessons. You can see the list of lessons on the sidebar on the left of the screen. Each lesson will have one or more tasks for you to complete. There are several different types of tasks: Theory, where you just need to read something (this is a theory task), Programming, where you will write a short program to be checked automatically, and Quizzes, simple multiple choice questions (I won't use these often, if at all).</p>\n<p>You can skip tasks if you get stuck, but you should try to complete the lessons in order, as they will often build on each other.</p>\n<h2>How to use IntelliJ</h2>\n<p>This application, IntelliJ, is the tool we use to write code. It has a <em>lot</em> of advanced features, but for now you'll just need to know the basics. Here's a quick tour.</p>\n<h3>Project View</h3>\n<p>The left sidebar is called the Project View. The Project View shows all of the lessons and tasks in this course. To switch to a new task, double click on it. When you're not in a course, the Project View will instead show all of the files in the current project.</p>\n<h3>Task Description</h3>\n<p>On the right side of the screen is the task description (what you're reading right now). When you start a new task, check the Task Description for new information and an explanation of what your program should do. At the bottom of the description, there will be an option to check your code (for programming tasks), or an option to continue (for theory tasks).\n<h3>Editor</h3>\n<p>Between the Project View and the Task Description is the Editor, the space in which you will write your code. I'll explain how to write and edit Java programs more in the next few lessons. Because this is a theory lesson, anything you put in the editor will not be checked.</p>\n<p>Good job making it through that block of text! Click the \"Next\" button below to continue to the first programming task.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Program Structure",
          "files" : {
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "Hello World!\n"
            },
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n    public static String solution() {\n        // Write your solution here\n\n        return \"Hello!\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solution());\n    }\n}"
            },
            "basic program structure.png" : {
              "name" : "basic program structure.png",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : ""
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Program Structure</h1>\n<p>Let's take a look at the basic structure of a Java program. Here is the basic program you will start with for  most of the programming exercises:</p>\n<img src=\"basic program structure.png\">\n<p>You can ignore a lot of that for now. The important part is that you should write your solution on the lines between the two curly braces highlighted in yellow. When you run your program, every line between those two braces will be executed as an instruction.</p>\n<p>Right now, there are two lines non-empty lines between the braces. You can add as many empty lines as you like to keep things organized, they won't do anything when the program is run. The first line (<code>// Write you solution here</code>) is a comment. Any line that starts with two forwards slashes is considered a comment and will be ignored when the program is run. Comments are useful to communicate to other people reading your code (and your future self) about what a particular piece of code is doing.</p>\n<p>The other non-empty line is <code>return \"Hello!\";</code>. \"return\" is the instruction to output something from the program. In this case, the program will output the word \"Hello!\". Note that the quotation marks are not part of the output. As with Python, strings need to have a quote mark on either side. Note that you can not use single quotes interchangeably like you can in Python. Finally, every statement in a Java program must end with a semicolon. It's easy to forget, but your program won't run if you forget it. Thankfully, IntelliJ is pretty good at showing you where the error is if you miss one.</p>\n<p>It's a common tradition for your first program in a new language to output a \"Hello World\" message. To complete this tasks, edit the program so that it outputs <code>Hello World!</code> and click on the \"Check\" button.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        },
        {
          "name" : "Comments",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n    public static String solution() {\n        // This is a comment\n\n        /*\n        This is a\n        multi-line comment\n         */\n\n        return \"Robots suck\";\n\n        //return \"Robots are awesome!\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(solution());\n    }\n}"
            },
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "Robots are awesome!\n"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Comments</h1>\n<p>In the last lesson I mentioned that any line that starts with two slashes is a comment and is ignored when the program is run. This type of comment only applies to one line. However, Java also has multi-line comments. You can start a multi line comment with <code>/*</code>, and every line after that will be considered a comment until a matching <code>*/</code> is reached. Multi-line comments are helpful when you want to give more than a sentence of explanation about your code.</p>\n<p>Another thing comments can be used for is temporarily removing a statement or a group of statements from your code. You can easily ignore a specific line by putting <code>//</code> in front of it, or you can use a multiline comment to remove a whole block of code.</p>\n<pre><code>\n  public static String solution() {\n        // This is a single line comment\n\n        /*\n        This is a multi-line comment.\n        Both are ignored when the program is run.\n         */\n    }\n</code></pre>\n<p>To complete this task, add or remove comments to make the program output \"Robots are awesome!\".</p>\n\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        },
        {
          "name" : "Assessment",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n   public static String solution() {\n      // Output \"Landsharks Forever!\"\n\n      This isnt valid code\n      Your program wont run while its here\n\n   }\n\n   public static void main(String[] args) {\n      System.out.println(solution());\n   }\n}"
            },
            "test/output.txt" : {
              "name" : "test/output.txt",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "Landsharks Forever!\n"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Assessment</h1>\n<p>At the end of each lesson there will be an programming assignment that covers everything you learned in that lesson. For this one, write a program that will return <code>Landsharks Forever!</code>. Try to solve it without deleting anything. You can refer back to previous tasks if needed.</p>\n\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "output"
        }
      ],
      "type" : "lesson"
    },
    {
      "title" : "Variables and Types",
      "task_list" : [
        {
          "name" : "Theory",
          "files" : {
            "src/Main.java" : {
              "name" : "src/Main.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Main {\n   public static int solution() {\n      int variableA = 4;\n      int variableB = 5;\n      int variableC = 6;\n\n      variableC = variableA + variableB;\n\n      return variableC;\n   }\n\n   public static void main(String[] args) {\n      System.out.println(solution());\n   }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Variables and Types</h1>\n<p>Ok, so now you know how to output something from your program. But a program that always outputs the same thing isn't very useful. To create more interesting programs, we need to talk about variables.</p>\n<p>Like a variable in algebra, a Java variable can have many different values, and its value can change throughout the program. Let's look at how variables are created:</p>\n<pre><code>\n  // Declares an integer variable named \"a\" and sets its value to 10\n  int a = 10;\n</code></pre>\n<p>When you create a variable in Java, you must give it a type. This variable is type \"int\", which stands for integer. There are many other types of variables, which we will cover later in this lesson. After the variable type is the name of the variable. A variable name can be a single character, a word, or multiple words, like <code>applesEaten</code>. Finally, you use an equal sign to give the variable its initial value, in this case 10.</p>\n<p>Once a variable has been declared, you can change it's value with the equals sign: <code>a = 5</code>. You only need to set the variable type when it's created. You can also use the values of variables to do math:</p>\n<pre><code>\n  int a = 10; // Declares an  variable named \"a\" and sets it to 10\n  a = 6; // Change the value to 6\n\n  int b = 8; // Create a second variable \"b\"\n  int c = a + b // c is 14\n\n  return c * 2 // Outputs 28\n</code></pre>\nHere are the operations Java supports:\n<pre><code>\n  return 3 + 4 // Addition. Returns 7.\n  return 3 - 4 // Subtraction. Returns -1.\n  return 3 * 4 // Multiplication. Returns 12.\n  return 3 / 4 // Integer Division. Returns 1.\n  /* WARNING: Because both of the inputs are integers,\n  your output is going to be an integer too. That means\n  any fractional component will be ignored (rounded down)\n  We will go over how to use decimal variables later. */\n\n  return 10 % 3 // Remainder. Returns 2. a % b will find the\n                // remainder of a / b.\n</code></pre>\nJava does support other mathematical operations, like exponents and square roots, but we'll get to them later. Do some experimenting with variables and operations before you move on to the next task. You can run your program and see what it outputs by pressing \"Run\".\n\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "theory"
        },
        {
          "name" : "Parameters",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n    public static int solution(int a, int b, int c) {\n        // Write your solution here\n\n        return 0;\n    }\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\npublic class Tests {\n    public static int exampleSolution(int a, int b, int c) {\n        return (a+b)*c;\n    }\n\n    Object[][] valuesToCheck = {\n            new Object[] {2, 3, 4},\n            new Object[] {4, 2, -2},\n            new Object[] {-5, 3, 0},\n            new Object[] {-1, -1, 5},\n            new Object[] {4, -6, -5}\n    };\n\n    @Test\n    public void testSolution() {\n        // Check the parameter and return types\n        Class testClass = Tests.class;\n        Method exampleMethod = null;\n        Class[] expectedParameters = new Class[0];\n        Class expectedReturnType = null;\n\n        Class taskClass = Task.class;\n        Method solutionMethod = null;\n        Class[] parameters = new Class[0];\n        Class returnType = null;\n\n        boolean exampleFound = false;\n        for(Method method : testClass.getMethods()) {\n            if(method.getName().equals(\"exampleSolution\")) {\n                exampleFound = true;\n                expectedParameters = method.getParameterTypes();\n                expectedReturnType = method.getReturnType();\n                exampleMethod = method;\n            }\n        }\n        Assert.assertTrue(\"Example solution is not defined\", exampleFound);\n\n        boolean solutionFound = false;\n        for(Method method : taskClass.getMethods()) {\n            if(method.getName().equals(\"solution\")) {\n                solutionFound = true;\n                parameters = method.getParameterTypes();\n                returnType = method.getReturnType();\n                solutionMethod = method;\n            }\n        }\n        Assert.assertTrue(\"Solution was not found, has it been renamed?\", solutionFound);\n\n        Assert.assertArrayEquals(\"The type or number of parameters your solution expects is incorrect\", expectedParameters, parameters);\n        Assert.assertEquals(\"The type of variable your solution returns is incorrect\", expectedReturnType, returnType);\n\n        for(int i = 0; i < valuesToCheck.length; i++) {\n            Object[] inputArr = valuesToCheck[i];\n            String testNumber = (i + 1) + \"/\" + valuesToCheck.length;\n            System.out.println(\"Test \" + testNumber + \": \" + Arrays.toString(inputArr));\n\n            String failMessage = \"Test \" + testNumber + \" failed. The parameters were: \" + Arrays.toString(inputArr);\n            try {\n                Assert.assertEquals(\n                        failMessage,\n                        exampleMethod.invoke(null, inputArr),\n                        solutionMethod.invoke(null, inputArr)\n                );\n            } catch (IllegalAccessException | InvocationTargetException e) {\n                Assert.fail(\"Exception in test handling\\n\" + Arrays.toString(e.getStackTrace()));\n            }\n        }\n    }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Parameters</h1>\n<p>So, how do variables allow us to create more interesting programs, which don't always output the same thing? The answer is a special type of variable called parameters. Parameters are the inputs to your program. Here's what they look like:</p>\n<pre><code>\npublic static int solution(int a, int b) { // a and b are parameters\n    int c = a + b // Arguments can be used like any other variable\n    return c;\n}\n</code></pre>\n<p>Like other variables, when you first create an parameter you must give it a type. However, you do not need to give it a value, because the value will be set by whatever is running your program (in this course, that is the automatic code checker). You can do math with arguments the same way you can with other variables.</p>\n<p>Note: Like the inputs of your program, the output has a specific type. The type of value your program should return is defined right before \"solution\" on the second line.</p>\n<img src=\"output_type.png\">\n<p>For this task, write a program that takes three integers as inputs, a, b, and c, and outputs (a+b)*c.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Number Types",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n    public static float solution(int a, int b) {\n        // Write your solution here\n\n        return 0f;\n    }\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\npublic class Tests {\n  public static float exampleSolution(int a, int b) {\n    // Implement the correct solution here\n    return ((float) a) / b;\n  }\n\n  Object[][] valuesToCheck = {\n          new Object[]{1, 2}, // List the inputs to check here\n          new Object[]{6, 7},\n          new Object[]{-3, 2},\n          new Object[]{8, -4},\n          new Object[]{-5, -3}\n  };\n\n  @Test\n  public void testSolution() {\n    // Check the parameter and return types\n    Class testClass = Tests.class;\n    Method exampleMethod = null;\n    Class[] expectedParameters = new Class[0];\n    Class expectedReturnType = null;\n\n    Class taskClass = Task.class;\n    Method solutionMethod = null;\n    Class[] parameters = new Class[0];\n    Class returnType = null;\n\n    boolean exampleFound = false;\n    for(Method method : testClass.getMethods()) {\n      if(method.getName().equals(\"exampleSolution\")) {\n        exampleFound = true;\n        expectedParameters = method.getParameterTypes();\n        expectedReturnType = method.getReturnType();\n        exampleMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Example solution is not defined\", exampleFound);\n\n    boolean solutionFound = false;\n    for(Method method : taskClass.getMethods()) {\n      if(method.getName().equals(\"solution\")) {\n        solutionFound = true;\n        parameters = method.getParameterTypes();\n        returnType = method.getReturnType();\n        solutionMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Solution was not found, has it been renamed?\", solutionFound);\n\n    Assert.assertArrayEquals(\"The type or number of parameters your solution expects is incorrect\", expectedParameters, parameters);\n    Assert.assertEquals(\"The type of variable your solution returns is incorrect\", expectedReturnType, returnType);\n\n    for(int i = 0; i < valuesToCheck.length; i++) {\n      Object[] inputArr = valuesToCheck[i];\n      String testNumber = (i + 1) + \"/\" + valuesToCheck.length;\n      System.out.println(\"Test \" + testNumber + \": \" + Arrays.toString(inputArr));\n\n      String failMessage = \"Test \" + testNumber + \" failed. The parameters were: \" + Arrays.toString(inputArr);\n      try {\n        Assert.assertEquals(\n                failMessage,\n                exampleMethod.invoke(null, inputArr),\n                solutionMethod.invoke(null, inputArr)\n        );\n      } catch (IllegalAccessException | InvocationTargetException e) {\n        Assert.fail(\"Exception in test handling\\n\" + Arrays.toString(e.getStackTrace()));\n      }\n    }\n  }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Number Types</h1>\n<p>Now that you understand how variables work, let's talk about some of the types of variables in Java. We've already covered integers, but there are many other types of numbers. The main differences are how many bytes of data they hold (and therefore how large and precise the values they can hold are), and whether they can hold decimal numbers. There are the different types of numbers you can use:</p>\n<pre><code>\n  Name  \tSize\t  Stores\n  byte\t\t1 byte\t  whole numbers from -128 to 127\n  short\t        2 bytes\t  whole numbers from -32,768 to 32,767\n  int\t        4 bytes\t  whole numbers from -2,147,483,648 to 2,147,483,647\n  long\t\t8 bytes\t  whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\n  float\t\t4 bytes\t  fractional numbers; sufficient for storing 6 to 7 decimal digits\n  double\t8 bytes\t  fractional numbers; sufficient for storing 15 decimal digits\n</code></pre>\n<p>For most programs, I just use int for whole numbers and float for decimal numbers. It's not the most memory efficient, but usually the difference in negligible and it makes keeping track of the types of your variables much easier. All of the operations we covered for the int type also work for the other number type.</p>\n<p>When you do an operation with two different types of numbers, generally the output will have the more precise type (the one that uses more memory). For example, an int times a float is a float.</p>\n<p>To convert a variable to a different type, you put the type desired type in parentheses in front of the variable name. This is called type casting.</p>\n<pre><code>\n  int a = 5;\n  float aFloat = (float) a;\n</code></pre>\n<p>Type casting also allows us to divide integers without discarding the fractional component, by converting one of the inputs to a float before we divide. The result of the division will also be a float.</p>\n<p>For this task, you will be given two integers, a and b. Return a divided by b, including the fractional component.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Strings",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n    public static String solution(String name) {\n        // Write your solution here\n\n        return \"\";\n    }\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\npublic class Tests {\n  public static String exampleSolution(String name) {\n    // Implement the correct solution here\n    return \"Hello \" + name + \"!\";\n  }\n\n  Object[][] valuesToCheck = {\n          new Object[]{\"John\"}, // List the inputs to check here\n          new Object[]{\"Randall Munroe\"},\n          new Object[]{\"Woodie Flowers\"},\n          new Object[]{\"Gary\"},\n          new Object[]{\"Jumpy\"}\n  };\n\n  @Test\n  public void testSolution() {\n    // Check the parameter and return types\n    Class testClass = Tests.class;\n    Method exampleMethod = null;\n    Class[] expectedParameters = new Class[0];\n    Class expectedReturnType = null;\n\n    Class taskClass = Task.class;\n    Method solutionMethod = null;\n    Class[] parameters = new Class[0];\n    Class returnType = null;\n\n    boolean exampleFound = false;\n    for(Method method : testClass.getMethods()) {\n      if(method.getName().equals(\"exampleSolution\")) {\n        exampleFound = true;\n        expectedParameters = method.getParameterTypes();\n        expectedReturnType = method.getReturnType();\n        exampleMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Example solution is not defined\", exampleFound);\n\n    boolean solutionFound = false;\n    for(Method method : taskClass.getMethods()) {\n      if(method.getName().equals(\"solution\")) {\n        solutionFound = true;\n        parameters = method.getParameterTypes();\n        returnType = method.getReturnType();\n        solutionMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Solution was not found, has it been renamed?\", solutionFound);\n\n    Assert.assertArrayEquals(\"The type or number of parameters your solution expects is incorrect\", expectedParameters, parameters);\n    Assert.assertEquals(\"The type of variable your solution returns is incorrect\", expectedReturnType, returnType);\n\n    for(int i = 0; i < valuesToCheck.length; i++) {\n      Object[] inputArr = valuesToCheck[i];\n      String testNumber = (i + 1) + \"/\" + valuesToCheck.length;\n      System.out.println(\"Test \" + testNumber + \": \" + Arrays.toString(inputArr));\n\n      String failMessage = \"Test \" + testNumber + \" failed. The parameters were: \" + Arrays.toString(inputArr);\n      try {\n        Assert.assertEquals(\n                failMessage,\n                exampleMethod.invoke(null, inputArr),\n                solutionMethod.invoke(null, inputArr)\n        );\n      } catch (IllegalAccessException | InvocationTargetException e) {\n        Assert.fail(\"Exception in test handling\\n\" + Arrays.toString(e.getStackTrace()));\n      }\n    }\n  }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Strings</h1>\n<p>Numbers are not the only thing variables can represent. One common type of variable is the <code>String</code>. A String is a sequence of characters, like a word, url, or password. Strings can be defined using quote marks:</p>\n<pre><code>\n  String hello = \"Hello\"\n</code></pre>\n<p>By far the most common operation done with strings is called concatenation, which just means joining two strings together. Concatenation is done with the <code>+</code> operator.</p>\n<pre><code>\n  String str1 = \"Hello\"\n  String str2 = \"World\"\n  String str3 = str1 + str2 // str3 = \"HelloWorld\"\n</code></pre>\n<p>You can also concatenate strings with other types of variables, like ints, and they will be automatically converted to strings first.</p>\n<pre><code>\n  String str1 = \"Hello\" + 5 // \"Hello5\"\n  String str2 = \"1\" + 2 // \"12\"\n  String str3 = 1 + \"2\" // \"12\"\n</code></pre>\n<p>For this task, your program should take a name as input and return \"Hello &lt;name&gt;!\". For example, if the input was \"John\", you should output \"Hello John!\".</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        },
        {
          "name" : "Booleans",
          "files" : {
            "src/Task.java" : {
              "name" : "src/Task.java",
              "placeholders" : [ ],
              "is_visible" : true,
              "text" : "public class Task {\n    public static boolean solution(boolean a, boolean b, boolean c) {\n        // Write your solution here\n\n        return false;\n    }\n}"
            },
            "test/Tests.java" : {
              "name" : "test/Tests.java",
              "placeholders" : [ ],
              "is_visible" : false,
              "text" : "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\npublic class Tests {\n  public static boolean exampleSolution(boolean a, boolean b, boolean c) {\n    // Implement the correct solution here\n    return (a && b) || c;\n  }\n\n  Object[][] valuesToCheck = {\n          new Object[]{false, false, false}, // List the inputs to check here\n          new Object[]{false, false, true},\n          new Object[]{false, true, false},\n          new Object[]{false, true, true},\n          new Object[]{true, false, false},\n          new Object[]{true, false, true},\n          new Object[]{true, true, false},\n          new Object[]{true, true, true},\n          \n  };\n\n  @Test\n  public void testSolution() {\n    // Check the parameter and return types\n    Class testClass = Tests.class;\n    Method exampleMethod = null;\n    Class[] expectedParameters = new Class[0];\n    Class expectedReturnType = null;\n\n    Class taskClass = Task.class;\n    Method solutionMethod = null;\n    Class[] parameters = new Class[0];\n    Class returnType = null;\n\n    boolean exampleFound = false;\n    for(Method method : testClass.getMethods()) {\n      if(method.getName().equals(\"exampleSolution\")) {\n        exampleFound = true;\n        expectedParameters = method.getParameterTypes();\n        expectedReturnType = method.getReturnType();\n        exampleMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Example solution is not defined\", exampleFound);\n\n    boolean solutionFound = false;\n    for(Method method : taskClass.getMethods()) {\n      if(method.getName().equals(\"solution\")) {\n        solutionFound = true;\n        parameters = method.getParameterTypes();\n        returnType = method.getReturnType();\n        solutionMethod = method;\n      }\n    }\n    Assert.assertTrue(\"Solution was not found, has it been renamed?\", solutionFound);\n\n    Assert.assertArrayEquals(\"The type or number of parameters your solution expects is incorrect\", expectedParameters, parameters);\n    Assert.assertEquals(\"The type of variable your solution returns is incorrect\", expectedReturnType, returnType);\n\n    for(int i = 0; i < valuesToCheck.length; i++) {\n      Object[] inputArr = valuesToCheck[i];\n      String testNumber = (i + 1) + \"/\" + valuesToCheck.length;\n      System.out.println(\"Test \" + testNumber + \": \" + Arrays.toString(inputArr));\n\n      String failMessage = \"Test \" + testNumber + \" failed. The parameters were: \" + Arrays.toString(inputArr);\n      try {\n        Assert.assertEquals(\n                failMessage,\n                exampleMethod.invoke(null, inputArr),\n                solutionMethod.invoke(null, inputArr)\n        );\n      } catch (IllegalAccessException | InvocationTargetException e) {\n        Assert.fail(\"Exception in test handling\\n\" + Arrays.toString(e.getStackTrace()));\n      }\n    }\n  }\n}"
            }
          },
          "description_text" : "<html lang=\"en\">\n<head>\n  <style>h1, h2{text-align: center}</style>\n</head>\n<body>\n<h1>Booleans</h1>\n<p>Booleans are one of the simplest types in Java. A boolean variable can only have two states: true or false. Booleans can be useful for keeping track of things that can only be one on two things, like whether a motor is on, or whether it should rotate forwards or backwards.</p>\n<code>boolean test = true;</code>\n<p>The are several operators that can be done on one or more boolean variables. Here are some of them</p>\n<pre><code>\n  boolean c = !a // True only if a is NOT true\n  boolean c = a && b // True only if a AND b are both true\n  boolean c = a || b // True only if a OR b are true (or both)\n  boolean c = a == b // True only if a and b are the same\n  boolean c = a != b // True only if a and b are different\n</code></pre>\n<p>Note that the <code>==</code> and <code>!=</code> operators can be used for numbers as well, to test if two numbers are equal or not equal.</p>\n<p>For this task, you will be given three boolean variables: a, b, and c. Return true in and and b are both true, or if c is true (or both). Otherwise, return false.</p>\n</body>\n</html>",
          "description_format" : "HTML",
          "feedback_link" : {
            "link_type" : "STEPIK"
          },
          "task_type" : "edu"
        }
      ],
      "type" : "lesson"
    }
  ],
  "additional_files" : [
    {
      "name" : "build.gradle",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "buildscript {\n    repositories {\n        mavenCentral()\n    }\n}\n\ndef printOutput(def output) {\n    return tasks.create(\"printOutput\") {\n        for (line in output.toString().readLines()) {\n            println \"#educational_plugin\" + line\n        }\n    }\n}\n\nsubprojects {\n    apply plugin: 'application'\n    apply plugin: 'java'\n\n    sourceCompatibility = 1.8\n\n    repositories {\n        mavenCentral()\n    }\n\n    dependencies {\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    sourceSets {\n        main {\n            java.srcDir 'src'\n        }\n        test {\n            java.srcDir 'test'\n        }\n    }\n\n    mainClassName = project.hasProperty(\"mainClass\") ? project.getProperty(\"mainClass\") : \"\"\n\n    def runOutput = new ByteArrayOutputStream()\n    tasks.run.setStandardOutput(runOutput)\n    tasks.run.doLast { printOutput(runOutput) }\n}\n\nproject(':util') {\n    dependencies {\n        compile group: 'junit', name: 'junit', version: '4.12'\n    }\n}\n\nconfigure(subprojects.findAll {it.name != 'util'}) {\n  dependencies {\n    compile project(':util').sourceSets.main.output\n    testCompile project(':util').sourceSets.test.output\n  }\n}\n"
    },
    {
      "name" : "template.html",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "<html lang=\"en\">\r\n<head>\r\n  <style>h1, h2{text-align: center}</style>\r\n</head>\r\n<body>\r\n<h1></h1>\r\n<p></p>\r\n\r\n</body>\r\n</html>"
    },
    {
      "name" : "template.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "public class Task {\r\n    public static void solution() {\r\n        // Write your solution here\r\n\r\n        return;\r\n    }\r\n}"
    },
    {
      "name" : "test_template.java",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "import org.junit.Assert;\r\nimport org.junit.Test;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\nimport java.lang.reflect.Method;\r\nimport java.util.Arrays;\r\n\r\npublic class Tests {\r\n    public static int exampleSolution() {\r\n        // Implement the correct solution here\r\n        return 0;\r\n    }\r\n\r\n    Object[][] valuesToCheck = {\r\n            new Object[]{}, // List the inputs to check here\r\n    };\r\n\r\n    @Test\r\n    public void testSolution() {\r\n        // Check the parameter and return types\r\n        Class testClass = Tests.class;\r\n        Method exampleMethod = null;\r\n        Class[] expectedParameters = new Class[0];\r\n        Class expectedReturnType = null;\r\n\r\n        Class taskClass = Task.class;\r\n        Method solutionMethod = null;\r\n        Class[] parameters = new Class[0];\r\n        Class returnType = null;\r\n\r\n        boolean exampleFound = false;\r\n        for(Method method : testClass.getMethods()) {\r\n            if(method.getName().equals(\"exampleSolution\")) {\r\n                exampleFound = true;\r\n                expectedParameters = method.getParameterTypes();\r\n                expectedReturnType = method.getReturnType();\r\n                exampleMethod = method;\r\n            }\r\n        }\r\n        Assert.assertTrue(\"Example solution is not defined\", exampleFound);\r\n\r\n        boolean solutionFound = false;\r\n        for(Method method : taskClass.getMethods()) {\r\n            if(method.getName().equals(\"solution\")) {\r\n                solutionFound = true;\r\n                parameters = method.getParameterTypes();\r\n                returnType = method.getReturnType();\r\n                solutionMethod = method;\r\n            }\r\n        }\r\n        Assert.assertTrue(\"Solution was not found, has it been renamed?\", solutionFound);\r\n\r\n        Assert.assertArrayEquals(\"The type or number of parameters your solution expects is incorrect\", expectedParameters, parameters);\r\n        Assert.assertEquals(\"The type of variable your solution returns is incorrect\", expectedReturnType, returnType);\r\n\r\n        for(int i = 0; i < valuesToCheck.length; i++) {\r\n            Object[] inputArr = valuesToCheck[i];\r\n            String testNumber = (i + 1) + \"/\" + valuesToCheck.length;\r\n            System.out.println(\"Test \" + testNumber + \": \" + Arrays.toString(inputArr));\r\n\r\n            String failMessage = \"Test \" + testNumber + \" failed. The parameters were: \" + Arrays.toString(inputArr);\r\n            try {\r\n                Assert.assertEquals(\r\n                        failMessage,\r\n                        exampleMethod.invoke(null, inputArr),\r\n                        solutionMethod.invoke(null, inputArr)\r\n                );\r\n            } catch (IllegalAccessException | InvocationTargetException e) {\r\n                Assert.fail(\"Exception in test handling\\n\" + Arrays.toString(e.getStackTrace()));\r\n            }\r\n        }\r\n    }\r\n}"
    }
  ],
  "version" : 11
}